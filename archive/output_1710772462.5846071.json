{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}, "tests": {"0": {"status": "ERROR", "message": "cls = <class 'drive_automation_test.TestMiscellaneousActions'>\n\n    @classmethod\n    def setup_class(cls):\n>       super(cls, TestMiscellaneousActions).setup_class()#FIRST SUPER CLASS\n\ndrive_automation_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndrive_automation_test.py:34: in setup_class\n    cls.driver.get(\"https://www.google.com/intl/en-US/drive/\")\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CF30727C80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF6C9FE68F4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF4D997344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF4F1026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CA07AD22+56930]\nE       \t(No symbol) [0x00007FF6C9FEF622]\nE       \t(No symbol) [0x00007FF6C9EA42E5]\nE       \t(No symbol) [0x00007FF6C9EA011A]\nE       \t(No symbol) [0x00007FF6C9E929F4]\nE       \t(No symbol) [0x00007FF6C9E93D29]\nE       \t(No symbol) [0x00007FF6C9E92CF3]\nE       \t(No symbol) [0x00007FF6C9E91EF4]\nE       \t(No symbol) [0x00007FF6C9E91E11]\nE       \t(No symbol) [0x00007FF6C9E90625]\nE       \t(No symbol) [0x00007FF6C9E90EDC]\nE       \t(No symbol) [0x00007FF6C9EA69FD]\nE       \t(No symbol) [0x00007FF6C9F28B47]\nE       \t(No symbol) [0x00007FF6C9F0BC9A]\nE       \t(No symbol) [0x00007FF6C9F281E2]\nE       \t(No symbol) [0x00007FF6C9F0BA43]\nE       \t(No symbol) [0x00007FF6C9EDD438]\nE       \t(No symbol) [0x00007FF6C9EDE4D1]\nE       \tGetHandleVerifier [0x00007FF6CA3F6AAD+3709933]\nE       \tGetHandleVerifier [0x00007FF6CA44FFED+4075821]\nE       \tGetHandleVerifier [0x00007FF6CA44817F+4043455]\nE       \tGetHandleVerifier [0x00007FF6CA119756+706710]\nE       \t(No symbol) [0x00007FF6C9FFB8FF]\nE       \t(No symbol) [0x00007FF6C9FF6AE4]\nE       \t(No symbol) [0x00007FF6C9FF6C3C]\nE       \t(No symbol) [0x00007FF6C9FE68F4]\nE       \tBaseThreadInitThunk [0x00007FFF4D997344+20]\nE       \tRtlUserThreadStart [0x00007FFF4F1026B1+33]\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_prerequisites", "rerun": "0"}, "1": {"status": "ERROR", "message": "cls = <class 'drive_automation_test.TestMiscellaneousActions'>\n\n    @classmethod\n    def setup_class(cls):\n>       super(cls, TestMiscellaneousActions).setup_class()#FIRST SUPER CLASS\n\ndrive_automation_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndrive_automation_test.py:34: in setup_class\n    cls.driver.get(\"https://www.google.com/intl/en-US/drive/\")\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CF30727C80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF6C9FE68F4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF4D997344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF4F1026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CA07AD22+56930]\nE       \t(No symbol) [0x00007FF6C9FEF622]\nE       \t(No symbol) [0x00007FF6C9EA42E5]\nE       \t(No symbol) [0x00007FF6C9EA011A]\nE       \t(No symbol) [0x00007FF6C9E929F4]\nE       \t(No symbol) [0x00007FF6C9E93D29]\nE       \t(No symbol) [0x00007FF6C9E92CF3]\nE       \t(No symbol) [0x00007FF6C9E91EF4]\nE       \t(No symbol) [0x00007FF6C9E91E11]\nE       \t(No symbol) [0x00007FF6C9E90625]\nE       \t(No symbol) [0x00007FF6C9E90EDC]\nE       \t(No symbol) [0x00007FF6C9EA69FD]\nE       \t(No symbol) [0x00007FF6C9F28B47]\nE       \t(No symbol) [0x00007FF6C9F0BC9A]\nE       \t(No symbol) [0x00007FF6C9F281E2]\nE       \t(No symbol) [0x00007FF6C9F0BA43]\nE       \t(No symbol) [0x00007FF6C9EDD438]\nE       \t(No symbol) [0x00007FF6C9EDE4D1]\nE       \tGetHandleVerifier [0x00007FF6CA3F6AAD+3709933]\nE       \tGetHandleVerifier [0x00007FF6CA44FFED+4075821]\nE       \tGetHandleVerifier [0x00007FF6CA44817F+4043455]\nE       \tGetHandleVerifier [0x00007FF6CA119756+706710]\nE       \t(No symbol) [0x00007FF6C9FFB8FF]\nE       \t(No symbol) [0x00007FF6C9FF6AE4]\nE       \t(No symbol) [0x00007FF6C9FF6C3C]\nE       \t(No symbol) [0x00007FF6C9FE68F4]\nE       \tBaseThreadInitThunk [0x00007FFF4D997344+20]\nE       \tRtlUserThreadStart [0x00007FFF4F1026B1+33]\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_share_via_link", "rerun": "0"}, "2": {"status": "ERROR", "message": "cls = <class 'drive_automation_test.TestMiscellaneousActions'>\n\n    @classmethod\n    def setup_class(cls):\n>       super(cls, TestMiscellaneousActions).setup_class()#FIRST SUPER CLASS\n\ndrive_automation_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndrive_automation_test.py:34: in setup_class\n    cls.driver.get(\"https://www.google.com/intl/en-US/drive/\")\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CF30727C80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF6C9FE68F4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF4D997344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF4F1026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CA07AD22+56930]\nE       \t(No symbol) [0x00007FF6C9FEF622]\nE       \t(No symbol) [0x00007FF6C9EA42E5]\nE       \t(No symbol) [0x00007FF6C9EA011A]\nE       \t(No symbol) [0x00007FF6C9E929F4]\nE       \t(No symbol) [0x00007FF6C9E93D29]\nE       \t(No symbol) [0x00007FF6C9E92CF3]\nE       \t(No symbol) [0x00007FF6C9E91EF4]\nE       \t(No symbol) [0x00007FF6C9E91E11]\nE       \t(No symbol) [0x00007FF6C9E90625]\nE       \t(No symbol) [0x00007FF6C9E90EDC]\nE       \t(No symbol) [0x00007FF6C9EA69FD]\nE       \t(No symbol) [0x00007FF6C9F28B47]\nE       \t(No symbol) [0x00007FF6C9F0BC9A]\nE       \t(No symbol) [0x00007FF6C9F281E2]\nE       \t(No symbol) [0x00007FF6C9F0BA43]\nE       \t(No symbol) [0x00007FF6C9EDD438]\nE       \t(No symbol) [0x00007FF6C9EDE4D1]\nE       \tGetHandleVerifier [0x00007FF6CA3F6AAD+3709933]\nE       \tGetHandleVerifier [0x00007FF6CA44FFED+4075821]\nE       \tGetHandleVerifier [0x00007FF6CA44817F+4043455]\nE       \tGetHandleVerifier [0x00007FF6CA119756+706710]\nE       \t(No symbol) [0x00007FF6C9FFB8FF]\nE       \t(No symbol) [0x00007FF6C9FF6AE4]\nE       \t(No symbol) [0x00007FF6C9FF6C3C]\nE       \t(No symbol) [0x00007FF6C9FE68F4]\nE       \tBaseThreadInitThunk [0x00007FFF4D997344+20]\nE       \tRtlUserThreadStart [0x00007FFF4F1026B1+33]\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_view_file_info", "rerun": "0"}}, "suite_name": "drive_automation_test.py"}}}, "date": "March 18, 2024", "start_time": 1710772390.8245578, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}